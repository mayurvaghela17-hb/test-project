// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rwUYFoLZwHEqYodpMb7shh
// Component: eAMJY9TdnUg
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic_app_starter.module.css"; // plasmic-import: rwUYFoLZwHEqYodpMb7shh/projectcss
import sty from "./PlasmicTestProject.module.css"; // plasmic-import: eAMJY9TdnUg/css
import Group2Icon from "./icons/PlasmicIcon__Group2"; // plasmic-import: ttEltM4Sjy/icon
import Group3Icon from "./icons/PlasmicIcon__Group3"; // plasmic-import: ygg1VNZOs9/icon
import VectorIcon from "./icons/PlasmicIcon__Vector"; // plasmic-import: uQonKrppcd/icon
import Vector2Icon from "./icons/PlasmicIcon__Vector2"; // plasmic-import: 1Zl-b6yv1A/icon
import SmsIcon from "./icons/PlasmicIcon__Sms"; // plasmic-import: x8DSvXiCZ4/icon
import EyeIcon from "./icons/PlasmicIcon__Eye"; // plasmic-import: ILJBWwuZgO/icon
import EyeSlashIcon from "./icons/PlasmicIcon__EyeSlash"; // plasmic-import: oKvz1dutk2/icon
import ImgLineIcon from "./icons/PlasmicIcon__ImgLine"; // plasmic-import: TJafHvDVOm/icon
import group139Kp28INl from "./images/group1.svg"; // plasmic-import: 39Kp28iNl/picture
import group712EDhzIhY4PN from "./images/group712.svg"; // plasmic-import: eDhzIhY4pN/picture
import groupAq347V4Dl6 from "./images/group.svg"; // plasmic-import: aq347v4Dl6/picture

export const PlasmicTestProject__VariantProps = new Array();

export const PlasmicTestProject__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicTestProject__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <div
              data-plasmic-name={"signIn"}
              data-plasmic-override={overrides.signIn}
              className={classNames(projectcss.all, sty.signIn)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"footer"}
                  data-plasmic-override={overrides.footer}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.footer)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fzSKd
                    )}
                  >
                    {
                      "Copyright 2023 \u00a9 Project Central. All Rights Reserved"
                    }
                  </div>
                </p.Stack>
              ) : null}
              <div
                data-plasmic-name={"signIn2"}
                data-plasmic-override={overrides.signIn2}
                className={classNames(projectcss.all, sty.signIn2)}
              >
                <div
                  data-plasmic-name={"rectangle107"}
                  data-plasmic-override={overrides.rectangle107}
                  className={classNames(projectcss.all, sty.rectangle107)}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__scL1J
                  )}
                >
                  {"Project Central"}
                </div>
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame36245"}
                  data-plasmic-override={overrides.frame36245}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame36245)}
                >
                  {false ? (
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"erpLogo"}
                      data-plasmic-override={overrides.erpLogo}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.erpLogo)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___8OtO)}
                        displayHeight={"53.297px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"53.299px"}
                        loading={"lazy"}
                        src={{
                          src: group139Kp28INl,
                          fullWidth: 53.299,
                          fullHeight: 53.297,
                          aspectRatio: 1
                        }}
                      />

                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___2AfvB)}
                        displayHeight={"51.128px"}
                        displayMaxHeight={"none"}
                        displayMaxWidth={"100%"}
                        displayMinHeight={"0"}
                        displayMinWidth={"0"}
                        displayWidth={"71.913px"}
                        loading={"lazy"}
                        src={{
                          src: group712EDhzIhY4PN,
                          fullWidth: 71.913,
                          fullHeight: 51.128,
                          aspectRatio: 1.384615
                        }}
                      />
                    </p.Stack>
                  ) : null}
                  <div
                    data-plasmic-name={"hbLogoAi2"}
                    data-plasmic-override={overrides.hbLogoAi2}
                    className={classNames(projectcss.all, sty.hbLogoAi2)}
                  >
                    <div
                      data-plasmic-name={"group"}
                      data-plasmic-override={overrides.group}
                      className={classNames(projectcss.all, sty.group)}
                    >
                      <div
                        data-plasmic-name={"group2"}
                        data-plasmic-override={overrides.group2}
                        className={classNames(projectcss.all, sty.group2)}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__lZq8)}
                          displayHeight={"55.384px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"62.298px"}
                          loading={"lazy"}
                          src={{
                            src: groupAq347V4Dl6,
                            fullWidth: 62.298,
                            fullHeight: 55.384,
                            aspectRatio: 1.125
                          }}
                        />

                        <div
                          data-plasmic-name={"group3"}
                          data-plasmic-override={overrides.group3}
                          className={classNames(projectcss.all, sty.group3)}
                        >
                          <Group2Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__j0HfH
                            )}
                            role={"img"}
                          />

                          <Group3Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__vxEiS
                            )}
                            role={"img"}
                          />
                        </div>
                        <VectorIcon
                          className={classNames(projectcss.all, sty.svg__qrHj1)}
                          role={"img"}
                        />
                      </div>
                    </div>
                  </div>
                </p.Stack>
                <div
                  data-plasmic-name={"group4018"}
                  data-plasmic-override={overrides.group4018}
                  className={classNames(projectcss.all, sty.group4018)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame36102"}
                    data-plasmic-override={overrides.frame36102}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame36102)}
                  >
                    <div
                      data-plasmic-name={"group4029"}
                      data-plasmic-override={overrides.group4029}
                      className={classNames(projectcss.all, sty.group4029)}
                    >
                      <div
                        data-plasmic-name={"rectangle108"}
                        data-plasmic-override={overrides.rectangle108}
                        className={classNames(projectcss.all, sty.rectangle108)}
                      />

                      {false ? (
                        <div
                          data-plasmic-name={"group729"}
                          data-plasmic-override={overrides.group729}
                          className={classNames(projectcss.all, sty.group729)}
                        >
                          <div
                            data-plasmic-name={"rectangle109"}
                            data-plasmic-override={overrides.rectangle109}
                            className={classNames(
                              projectcss.all,
                              sty.rectangle109
                            )}
                          />

                          <Vector2Icon
                            className={classNames(projectcss.all, sty.svg__crF)}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                    </div>
                    <div
                      data-plasmic-name={"manageApplications"}
                      data-plasmic-override={overrides.manageApplications}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.manageApplications
                      )}
                    >
                      {"Keep me logged in"}
                    </div>
                  </p.Stack>
                  <div
                    data-plasmic-name={"manageApplications2"}
                    data-plasmic-override={overrides.manageApplications2}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.manageApplications2
                    )}
                  >
                    {"Forgot Password?"}
                  </div>
                </div>
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame36099"}
                  data-plasmic-override={overrides.frame36099}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame36099)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame36098"}
                    data-plasmic-override={overrides.frame36098}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame36098)}
                  >
                    <div
                      data-plasmic-name={"email"}
                      data-plasmic-override={overrides.email}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.email
                      )}
                    >
                      {"Enter your email address"}
                    </div>
                    <div
                      data-plasmic-name={"vuesaxlinearsms"}
                      data-plasmic-override={overrides.vuesaxlinearsms}
                      className={classNames(
                        projectcss.all,
                        sty.vuesaxlinearsms
                      )}
                    >
                      <div
                        data-plasmic-name={"vuesaxlinearsms2"}
                        data-plasmic-override={overrides.vuesaxlinearsms2}
                        className={classNames(
                          projectcss.all,
                          sty.vuesaxlinearsms2
                        )}
                      >
                        <SmsIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___1RkzJ
                          )}
                          role={"img"}
                        />
                      </div>
                    </div>
                  </p.Stack>
                </p.Stack>
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame36100"}
                  data-plasmic-override={overrides.frame36100}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame36100)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame36101"}
                    data-plasmic-override={overrides.frame36101}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame36101)}
                  >
                    <div
                      data-plasmic-name={"password"}
                      data-plasmic-override={overrides.password}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.password
                      )}
                    >
                      {"Enter your password"}
                    </div>
                    <div
                      data-plasmic-name={"group4014"}
                      data-plasmic-override={overrides.group4014}
                      className={classNames(projectcss.all, sty.group4014)}
                    >
                      {false ? (
                        <div
                          data-plasmic-name={"vuesaxlineareye"}
                          data-plasmic-override={overrides.vuesaxlineareye}
                          className={classNames(
                            projectcss.all,
                            sty.vuesaxlineareye
                          )}
                        >
                          <EyeIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__b6Voh
                            )}
                            role={"img"}
                          />
                        </div>
                      ) : null}
                      <div
                        data-plasmic-name={"vuesaxlineareyeSlash"}
                        data-plasmic-override={overrides.vuesaxlineareyeSlash}
                        className={classNames(
                          projectcss.all,
                          sty.vuesaxlineareyeSlash
                        )}
                      >
                        <EyeSlashIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___6VkEf
                          )}
                          role={"img"}
                        />
                      </div>
                    </div>
                  </p.Stack>
                </p.Stack>
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"frame36103"}
                  data-plasmic-override={overrides.frame36103}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame36103)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__i84Ci
                    )}
                  >
                    {"Login"}
                  </div>
                </p.Stack>
                <div
                  data-plasmic-name={"group4020"}
                  data-plasmic-override={overrides.group4020}
                  className={classNames(projectcss.all, sty.group4020)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame36104"}
                    data-plasmic-override={overrides.frame36104}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame36104)}
                  >
                    <div
                      data-plasmic-name={"manageApplications3"}
                      data-plasmic-override={overrides.manageApplications3}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.manageApplications3
                      )}
                    >
                      {"Sign In to"}
                    </div>
                  </p.Stack>
                  <div
                    data-plasmic-name={"group4019"}
                    data-plasmic-override={overrides.group4019}
                    className={classNames(projectcss.all, sty.group4019)}
                  >
                    <p.Stack
                      as={ImgLineIcon}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.svg__excNh)}
                      role={"img"}
                    />
                  </div>
                </div>
              </div>
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "signIn",
    "footer",
    "signIn2",
    "rectangle107",
    "frame36245",
    "erpLogo",
    "hbLogoAi2",
    "group",
    "group2",
    "group3",
    "group4018",
    "frame36102",
    "group4029",
    "rectangle108",
    "group729",
    "rectangle109",
    "manageApplications",
    "manageApplications2",
    "frame36099",
    "frame36098",
    "email",
    "vuesaxlinearsms",
    "vuesaxlinearsms2",
    "frame36100",
    "frame36101",
    "password",
    "group4014",
    "vuesaxlineareye",
    "vuesaxlineareyeSlash",
    "frame36103",
    "group4020",
    "frame36104",
    "manageApplications3",
    "group4019"
  ],

  signIn: [
    "signIn",
    "footer",
    "signIn2",
    "rectangle107",
    "frame36245",
    "erpLogo",
    "hbLogoAi2",
    "group",
    "group2",
    "group3",
    "group4018",
    "frame36102",
    "group4029",
    "rectangle108",
    "group729",
    "rectangle109",
    "manageApplications",
    "manageApplications2",
    "frame36099",
    "frame36098",
    "email",
    "vuesaxlinearsms",
    "vuesaxlinearsms2",
    "frame36100",
    "frame36101",
    "password",
    "group4014",
    "vuesaxlineareye",
    "vuesaxlineareyeSlash",
    "frame36103",
    "group4020",
    "frame36104",
    "manageApplications3",
    "group4019"
  ],

  footer: ["footer"],
  signIn2: [
    "signIn2",
    "rectangle107",
    "frame36245",
    "erpLogo",
    "hbLogoAi2",
    "group",
    "group2",
    "group3",
    "group4018",
    "frame36102",
    "group4029",
    "rectangle108",
    "group729",
    "rectangle109",
    "manageApplications",
    "manageApplications2",
    "frame36099",
    "frame36098",
    "email",
    "vuesaxlinearsms",
    "vuesaxlinearsms2",
    "frame36100",
    "frame36101",
    "password",
    "group4014",
    "vuesaxlineareye",
    "vuesaxlineareyeSlash",
    "frame36103",
    "group4020",
    "frame36104",
    "manageApplications3",
    "group4019"
  ],

  rectangle107: ["rectangle107"],
  frame36245: [
    "frame36245",
    "erpLogo",
    "hbLogoAi2",
    "group",
    "group2",
    "group3"
  ],

  erpLogo: ["erpLogo"],
  hbLogoAi2: ["hbLogoAi2", "group", "group2", "group3"],
  group: ["group", "group2", "group3"],
  group2: ["group2", "group3"],
  group3: ["group3"],
  group4018: [
    "group4018",
    "frame36102",
    "group4029",
    "rectangle108",
    "group729",
    "rectangle109",
    "manageApplications",
    "manageApplications2"
  ],

  frame36102: [
    "frame36102",
    "group4029",
    "rectangle108",
    "group729",
    "rectangle109",
    "manageApplications"
  ],

  group4029: ["group4029", "rectangle108", "group729", "rectangle109"],
  rectangle108: ["rectangle108"],
  group729: ["group729", "rectangle109"],
  rectangle109: ["rectangle109"],
  manageApplications: ["manageApplications"],
  manageApplications2: ["manageApplications2"],
  frame36099: [
    "frame36099",
    "frame36098",
    "email",
    "vuesaxlinearsms",
    "vuesaxlinearsms2"
  ],

  frame36098: ["frame36098", "email", "vuesaxlinearsms", "vuesaxlinearsms2"],
  email: ["email"],
  vuesaxlinearsms: ["vuesaxlinearsms", "vuesaxlinearsms2"],
  vuesaxlinearsms2: ["vuesaxlinearsms2"],
  frame36100: [
    "frame36100",
    "frame36101",
    "password",
    "group4014",
    "vuesaxlineareye",
    "vuesaxlineareyeSlash"
  ],

  frame36101: [
    "frame36101",
    "password",
    "group4014",
    "vuesaxlineareye",
    "vuesaxlineareyeSlash"
  ],

  password: ["password"],
  group4014: ["group4014", "vuesaxlineareye", "vuesaxlineareyeSlash"],
  vuesaxlineareye: ["vuesaxlineareye"],
  vuesaxlineareyeSlash: ["vuesaxlineareyeSlash"],
  frame36103: ["frame36103"],
  group4020: ["group4020", "frame36104", "manageApplications3", "group4019"],
  frame36104: ["frame36104", "manageApplications3"],
  manageApplications3: ["manageApplications3"],
  group4019: ["group4019"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTestProject__ArgProps,
          internalVariantPropNames: PlasmicTestProject__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicTestProject__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTestProject";
  } else {
    func.displayName = `PlasmicTestProject.${nodeName}`;
  }
  return func;
}

export const PlasmicTestProject = Object.assign(
  // Top-level PlasmicTestProject renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    signIn: makeNodeComponent("signIn"),
    footer: makeNodeComponent("footer"),
    signIn2: makeNodeComponent("signIn2"),
    rectangle107: makeNodeComponent("rectangle107"),
    frame36245: makeNodeComponent("frame36245"),
    erpLogo: makeNodeComponent("erpLogo"),
    hbLogoAi2: makeNodeComponent("hbLogoAi2"),
    group: makeNodeComponent("group"),
    group2: makeNodeComponent("group2"),
    group3: makeNodeComponent("group3"),
    group4018: makeNodeComponent("group4018"),
    frame36102: makeNodeComponent("frame36102"),
    group4029: makeNodeComponent("group4029"),
    rectangle108: makeNodeComponent("rectangle108"),
    group729: makeNodeComponent("group729"),
    rectangle109: makeNodeComponent("rectangle109"),
    manageApplications: makeNodeComponent("manageApplications"),
    manageApplications2: makeNodeComponent("manageApplications2"),
    frame36099: makeNodeComponent("frame36099"),
    frame36098: makeNodeComponent("frame36098"),
    email: makeNodeComponent("email"),
    vuesaxlinearsms: makeNodeComponent("vuesaxlinearsms"),
    vuesaxlinearsms2: makeNodeComponent("vuesaxlinearsms2"),
    frame36100: makeNodeComponent("frame36100"),
    frame36101: makeNodeComponent("frame36101"),
    password: makeNodeComponent("password"),
    group4014: makeNodeComponent("group4014"),
    vuesaxlineareye: makeNodeComponent("vuesaxlineareye"),
    vuesaxlineareyeSlash: makeNodeComponent("vuesaxlineareyeSlash"),
    frame36103: makeNodeComponent("frame36103"),
    group4020: makeNodeComponent("group4020"),
    frame36104: makeNodeComponent("frame36104"),
    manageApplications3: makeNodeComponent("manageApplications3"),
    group4019: makeNodeComponent("group4019"),
    // Metadata about props expected for PlasmicTestProject
    internalVariantProps: PlasmicTestProject__VariantProps,
    internalArgProps: PlasmicTestProject__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTestProject;
/* prettier-ignore-end */
